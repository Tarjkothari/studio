// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Ranks candidates based on their relevance to a specific job description.
 *
 * - rankCandidates - A function that ranks candidates based on job description relevance.
 * - RankCandidatesInput - The input type for the rankCandidates function.
 * - RankCandidatesOutput - The return type for the rankCandidates function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RankCandidatesInputSchema = z.object({
  jobDescription: z.string().describe('The job description to rank candidates against.'),
  resumes: z.array(z.string()).describe('An array of resume texts to rank.'),
});
export type RankCandidatesInput = z.infer<typeof RankCandidatesInputSchema>;

const RankCandidatesOutputSchema = z.array(
  z.object({
    resume: z.string().describe('The resume text that was ranked.'),
    score: z.number().describe('The relevance score of the resume to the job description (0-100).'),
    justification: z.string().describe('Explanation of why the resume received this score.'),
  })
);
export type RankCandidatesOutput = z.infer<typeof RankCandidatesOutputSchema>;

export async function rankCandidates(input: RankCandidatesInput): Promise<RankCandidatesOutput> {
  return rankCandidatesFlow(input);
}

const rankCandidatesPrompt = ai.definePrompt({
  name: 'rankCandidatesPrompt',
  input: {schema: RankCandidatesInputSchema},
  output: {schema: RankCandidatesOutputSchema},
  prompt: `You are an expert recruiter tasked with ranking candidates based on their resumes' relevance to a specific job description.

  Job Description: {{{jobDescription}}}

  You will receive a list of resumes. For each resume, you must:
  1.  Determine how well the resume matches the job description.
  2.  Assign a relevance score between 0 and 100.
  3.  Provide a brief justification for the assigned score.

  The output should be a JSON array, where each object in the array corresponds to a resume. Each object must contain the original resume text, the assigned score, and the justification for the score.

  Here are the resumes:
  {{#each resumes}}
  Resume:
  {{this}}
  {{/each}}`,
});

const rankCandidatesFlow = ai.defineFlow(
  {
    name: 'rankCandidatesFlow',
    inputSchema: RankCandidatesInputSchema,
    outputSchema: RankCandidatesOutputSchema,
  },
  async input => {
    const {output} = await rankCandidatesPrompt(input);
    return output!;
  }
);
